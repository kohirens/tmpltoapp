version: 2.1

orbs:
    vr: kohirens/version-release@3.1.0

parameters:
    app_name:
        default: "tmplpress"
        type: string
    ctx_ci_cd:
        default: kohirens-automation
        description: automation context
        type: string
    ctx_docker_hub:
        default: kohirens-automation-dockerhub
        description: docker credentials context
        type: string
    ssh_finger:
        description: SSH fingerprint.
        type: string
        default: "SHA256:CgtYkgOsmwp8z79MwpBeXTs4sI1ba3S9RUCFjQ1xR3g"
    triggered_flow:
        default: "workflow-selector"
        description: Workflow to be executed.
        type: string

default-env-vars: &default-env-vars
    DH_IMG_REPO: "kohirens/tmplpress"
    DH_CONTAINER: "tmplpress-node-1"

filter-semantic-tag: &filter-semantic-tag
    tags:
        only: /^v?\d+\.\d+\.\d+$/
    branches:
        ignore: /.*/

jobs:
    co:
        docker:
            - image: cimg/go:1.21
        steps:
            - checkout
            - restore_cache:
                  keys:
                      - go-mod-v1-{{ checksum "go.mod" }}
            - run:
                  name: Install Dependencies
                  command: go mod tidy
            - save_cache:
                  key: go-mod-v1-{{ checksum "go.mod" }}
                  paths:
                      - "/go/pkg/mod"
            - persist_to_workspace:
                  root: .
                  paths: [ . ]
    run-test:
        docker:
            - image: cimg/go:1.21
        steps:
            - attach_workspace:
                  at: .
            - restore_cache:
                  keys:
                      - go-mod-v1-{{ checksum "go.mod" }}
            - run:
                  name: "Unit Test"
                  command: |
                      go test -v ./...
            - run:
                  name: "Validate Answers/Template Schemas"
                  command: |
                      curl -L -o "yajsv" https://github.com/neilpa/yajsv/releases/download/v1.4.1/yajsv.linux.amd64
                      chmod +x ./yajsv
                      ./yajsv -s answers.schema.json testdata/answers-01.json
                      ./yajsv -s template.schema.json testdata/template-01.json
                      ./yajsv -s template.schema.json testdata/template-1.2.json

    publish-execs:
        parameters:
            app_name:
                type: string
            build_tag:
                default: << pipeline.git.tag >>
                type: string
        docker:
            - image: kohirens/go-release:0.2.7
              auth:
                  username: ${DH_USER}
                  password: ${DH_PASS}
        steps:
            - checkout
            - run:
                  name: Build
                  command: |
                      echo "Publishing GitHub release '<< parameters.build_tag >>' assets"
                      src_dir=.
                      go generate "${src_dir}"
                      go-release build \
                          "${src_dir}" \
                          "<< parameters.app_name >>" \
                          "<< parameters.build_tag >>" \
                          "kohirens" \
                          "<< parameters.app_name >>"

workflows:
    quality-control:
        jobs:
            - co:
                filters: { branches: { ignore: /main|auto-update-changelog/ } }
            - run-test:
                requires: [ co ]

    workflow-selector:
        when:
            and:
                - equal: ["workflow-selector", << pipeline.parameters.triggered_flow >>]
                - equal: [ main, << pipeline.git.branch >> ]
        jobs:
            - vr/workflow-selector:
                  context: << pipeline.parameters.ctx_ci_cd >>
                  ssh_finger: << pipeline.parameters.ssh_finger >>

    publish-changelog:
        when:
            and:
                - equal: ["publish-changelog", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vr/publish-changelog:
                  context: << pipeline.parameters.ctx_ci_cd >>
                  ssh_finger: << pipeline.parameters.ssh_finger >>

    publish-release-tag:
        when:
            and:
                - equal: ["publish-release-tag", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vr/tag-and-release:
                  context: << pipeline.parameters.ctx_ci_cd >>

    on-tag-release:
        jobs:
            - publish-execs:
                  context: << pipeline.parameters.ctx_ci_cd >>
                  filters:
                      <<: *filter-semantic-tag
                  app_name: <<pipeline.parameters.app_name>>
            - vr/publish-docker-hub:
                  context: << pipeline.parameters.ctx_docker_hub >>
                  filters:
                      <<: *filter-semantic-tag
                  dockerfile: ".docker/Dockerfile"
                  image_tag: "<< pipeline.git.tag >>"
                  repository: "kohirens/<< pipeline.parameters.app_name >>"
            - vr/publish-docker-hub:
                  context: << pipeline.parameters.ctx_docker_hub >>
                  filters:
                      <<: *filter-semantic-tag
                  dockerfile: ".docker/Dockerfile"
                  image_tag: "latest"
                  repository: "kohirens/<< pipeline.parameters.app_name >>"
